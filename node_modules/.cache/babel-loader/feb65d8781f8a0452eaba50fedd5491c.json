{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yahya\\\\Desktop\\\\React Projects\\\\react-expenses-project\\\\src\\\\components\\\\NewExpense\\\\NewExpense.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ExpenseForm from './ExpenseForm';\nimport './NewExpense.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewExpense = props => {\n  _s();\n\n  const saveExpenseDataHandler = enteredExpenseData => {\n    const expenseData = { ...enteredExpenseData,\n      id: Math.random().toString()\n    };\n    props.onAddExpense(expenseData);\n    console.log(\"Hit2\");\n    setRenderedForm( /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: AddExpenseHandler,\n      children: \"Add New Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 21\n    }, this));\n  };\n\n  const cancelExpenseFormHandler = event => {\n    setRenderedForm( /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: AddExpenseHandler,\n      children: \"Add New Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 21\n    }, this));\n  };\n\n  const AddExpenseHandler = event => {\n    setRenderedForm( /*#__PURE__*/_jsxDEV(ExpenseForm, {\n      onSaveExpenseData: saveExpenseDataHandler,\n      onCancelExpenseForm: cancelExpenseFormHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }, this));\n  };\n\n  const [renderedForm, setRenderedForm] = useState( /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: AddExpenseHandler,\n    children: \"Add New Expense\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 52\n  }, this)); //The better solution would have been to have created a toggleOpenForm function and to have a conditional in the html section\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-expense\",\n    children: renderedForm\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewExpense, \"pmrprz69Xzcqptq3azO7yGVQEmQ=\");\n\n_c = NewExpense;\nexport default NewExpense;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewExpense\");","map":{"version":3,"sources":["C:/Users/yahya/Desktop/React Projects/react-expenses-project/src/components/NewExpense/NewExpense.js"],"names":["React","useState","ExpenseForm","NewExpense","props","saveExpenseDataHandler","enteredExpenseData","expenseData","id","Math","random","toString","onAddExpense","console","log","setRenderedForm","AddExpenseHandler","cancelExpenseFormHandler","event","renderedForm"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,kBAAP;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAMC,sBAAsB,GAAIC,kBAAD,IAAwB;AACrD,UAAMC,WAAW,GAAG,EAClB,GAAGD,kBADe;AAElBE,MAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd;AAFc,KAApB;AAIAP,IAAAA,KAAK,CAACQ,YAAN,CAAmBL,WAAnB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEAC,IAAAA,eAAe,eAAC;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAEC,iBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAD,CAAf;AACD,GATD;;AAWA,QAAMC,wBAAwB,GAAGC,KAAK,IAAI;AACxCH,IAAAA,eAAe,eAAC;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAEC,iBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAD,CAAf;AACD,GAFD;;AAIA,QAAMA,iBAAiB,GAAGE,KAAK,IAAI;AACjCH,IAAAA,eAAe,eAAC,QAAC,WAAD;AAAa,MAAA,iBAAiB,EAAEV,sBAAhC;AAAwD,MAAA,mBAAmB,EAAEY;AAA7E;AAAA;AAAA;AAAA;AAAA,YAAD,CAAf;AACD,GAFD;;AAIA,QAAM,CAACE,YAAD,EAAeJ,eAAf,IAAkCd,QAAQ,eAAC;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEe,iBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAD,CAAhD,CApB4B,CAqB5B;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,cACGG;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5BD;;GAAMhB,U;;KAAAA,U;AA8BN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport ExpenseForm from './ExpenseForm';\r\nimport './NewExpense.css';\r\n\r\nconst NewExpense = (props) => {\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString()\r\n    };\r\n    props.onAddExpense(expenseData);\r\n    console.log(\"Hit2\")\r\n\r\n    setRenderedForm(<button type=\"button\" onClick={AddExpenseHandler}>Add New Expense</button>)\r\n  };\r\n\r\n  const cancelExpenseFormHandler = event => {\r\n    setRenderedForm(<button type=\"button\" onClick={AddExpenseHandler}>Add New Expense</button>)\r\n  }\r\n\r\n  const AddExpenseHandler = event => {\r\n    setRenderedForm(<ExpenseForm onSaveExpenseData={saveExpenseDataHandler} onCancelExpenseForm={cancelExpenseFormHandler} />)\r\n  };\r\n\r\n  const [renderedForm, setRenderedForm] = useState(<button type=\"button\" onClick={AddExpenseHandler}>Add New Expense</button>)\r\n  //The better solution would have been to have created a toggleOpenForm function and to have a conditional in the html section\r\n\r\n  return (\r\n    <div className='new-expense'>\r\n      {renderedForm}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;"]},"metadata":{},"sourceType":"module"}